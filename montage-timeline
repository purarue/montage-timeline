#!/usr/bin/env bash
# Template from https://github.com/seanbreckenridge/havecmd

set -o pipefail

havecmd() {
	local BINARY ERRMSG
	BINARY="${1:?Must provide command to check}"
	if command -v "${BINARY}" >/dev/null 2>&1; then
		return 0
	else
		ERRMSG="'${script_name}' requires '${BINARY}', could not find that on your \$PATH"
		[[ -n "$2" ]] && ERRMSG="${ERRMSG}. $2"
		printf '%s\n' "${ERRMSG}" 1>&2
		return 1
	fi
}

set -e
havecmd sha1sum
havecmd jq
havecmd montage 'Installed with imagemagick'
set +e

MONTAGE_IMAGE_CACHE="${HOME}/.cache/montage_timeline"
mkdir -p "${MONTAGE_IMAGE_CACHE}"

download_to_cache() {
	local url_hash target_file
	local url="${1:?Must provide url to download}"
	hash="$(sha1sum <<<"${url}" | cut -d" " -f1)"
	target_file="${MONTAGE_IMAGE_CACHE}/${hash}.${url##*.}"
	if [[ ! -f "${target_file}" ]]; then
		echo "Downloading ${url} to ${target_file}" 1>&2
		curl -sSL "${url}" >"${target_file}"
	fi
	echo "${target_file}"
}

cache_image() {
	local target="${1:?Must provide target image}"
	local cached_image
	if [[ "$target" =~ ^https?:// ]]; then
		download_to_cache "$target"
	else
		printf "%s\n" "$target"
	fi
}

combine_images() {
	local -a parts_array temp_images
	local parts_tmpdir img_number
	temp_images=()
	parts_tmpdir="$(mktemp -d)"
	img_number='0'
	while read -r line; do
		local local_img image_with_label
		local -a subtitles
		subtitles=()
		IFS='|' read -r -a parts_array <<<"${line}"
		local_img="$(cache_image "${parts_array[0]}")"
		if [[ ! -f "$local_img" ]]; then
			echo -e "Local img doesn't exist: ${local_img}" 1>&2
			return 1
		fi
		unset parts_array[0]
		for part in "${parts_array[@]}"; do
			subtitles+=("label:${part}")
		done
		image_with_label="${parts_tmpdir}/${img_number}.png"
		printf '.' 1>&2
		convert "${local_img}" -resize x500 -bordercolor black -border '0x3%' -pointsize "${MONTAGE_FONT_SIZE:-35}" -font "${MONTAGE_TIMELINE_FONT:-Helvetica}" -background "${MONTAGE_BACKGROUND:-black}" -fill "${MONTAGE_TEXTCOLOR:-white}" "${subtitles[@]}" -gravity "${MONTAGE_GRAVITY:-Center}" -append -bordercolor black -border '0%x3%' -gravity Center "${image_with_label}"
		temp_images+=("${image_with_label}")
		((img_number++))
	done
	echo
	montage_full="${parts_tmpdir}/montage.png"
	montage "${temp_images[@]}" -background black -geometry '500x550>+0+50' "${montage_full}"
	convert "${montage_full}" -resize x2000 "$1"
	rm -rf "${parts_tmpdir}"
}

example_input() {
	echo -e 'https://img.sean.fish/i/demon_days_gorillaz_2005.jpeg|Item 1|subtitle text'
	echo -e '/path/to/image.png|Item 2|subtitle text'
}

main() {
	if [[ -n "$1" ]]; then
		combine_images "$1"
	else
		echo "Usage: montage-timeline <output_file>"
		echo "Pipe data to STDIN, like:"
		example_input
		return 1
	fi
	return 0
}

main "$@" || exit $?
